# PowerShell Script para Publica√ß√£o no PyPI
# Uso: .\publish.ps1 [-test] [-version "1.2.2"]

param(
    [switch]$test,
    [string]$version = ""
)

Write-Host "üöÄ NetBox Maintenance Device - Publica√ß√£o PyPI" -ForegroundColor Green
Write-Host "=" * 50 -ForegroundColor Gray

# Verificar se estamos no diret√≥rio correto
if (-not (Test-Path "setup.py")) {
    Write-Host "‚ùå Erro: setup.py n√£o encontrado. Execute este script no diret√≥rio do projeto." -ForegroundColor Red
    exit 1
}

# Verificar depend√™ncias
$required_tools = @("python", "git")
foreach ($tool in $required_tools) {
    try {
        & $tool --version | Out-Null
        Write-Host "‚úÖ $tool encontrado" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå $tool n√£o encontrado. Instale $tool primeiro." -ForegroundColor Red
        exit 1
    }
}

# Atualizar vers√£o se fornecida
if ($version) {
    Write-Host "üìù Atualizando vers√£o para $version..." -ForegroundColor Yellow
    python bump_version.py $version
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Erro ao atualizar vers√£o" -ForegroundColor Red
        exit 1
    }
}

# Verificar se h√° mudan√ßas n√£o commitadas
$git_status = git status --porcelain
if ($git_status) {
    Write-Host "‚ö†Ô∏è  Existem mudan√ßas n√£o commitadas:" -ForegroundColor Yellow
    git status --short
    $confirm = Read-Host "Continuar mesmo assim? (y/N)"
    if ($confirm -ne "y" -and $confirm -ne "Y") {
        Write-Host "‚ùå Publica√ß√£o cancelada" -ForegroundColor Red
        exit 1
    }
}

# Limpeza
Write-Host "üßπ Limpando builds anteriores..." -ForegroundColor Yellow
Remove-Item -Path "build", "dist", "*.egg-info" -Recurse -Force -ErrorAction SilentlyContinue

# Instalar depend√™ncias de build
Write-Host "üì¶ Instalando depend√™ncias de build..." -ForegroundColor Yellow
python -m pip install --upgrade pip setuptools wheel twine build

# Build
Write-Host "üèóÔ∏è  Construindo pacote..." -ForegroundColor Yellow
python -m build
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro durante o build" -ForegroundColor Red
    exit 1
}

# Verificar pacote
Write-Host "‚úÖ Verificando pacote..." -ForegroundColor Yellow
python -m twine check dist/*
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro na verifica√ß√£o do pacote" -ForegroundColor Red
    exit 1
}

# Mostrar arquivos criados
Write-Host "üìÇ Arquivos criados:" -ForegroundColor Blue
Get-ChildItem -Path "dist" | ForEach-Object { Write-Host "   - $($_.Name)" -ForegroundColor Cyan }

# Confirmar publica√ß√£o
if ($test) {
    $target = "TestPyPI"
    $repository_arg = "--repository testpypi"
    $install_url = "https://test.pypi.org/project/netbox-maintenance-device/"
} else {
    $target = "PyPI"
    $repository_arg = ""
    $install_url = "https://pypi.org/project/netbox-maintenance-device/"
}

Write-Host ""
Write-Host "üéØ Destino: $target" -ForegroundColor Magenta
$confirm = Read-Host "Confirma a publica√ß√£o? (y/N)"

if ($confirm -eq "y" -or $confirm -eq "Y") {
    Write-Host "üì§ Publicando no $target..." -ForegroundColor Green
    
    if ($test) {
        python -m twine upload --repository testpypi dist/*
    } else {
        python -m twine upload dist/*
    }
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host ""
        Write-Host "üéâ Publica√ß√£o realizada com sucesso!" -ForegroundColor Green
        Write-Host "üìç Dispon√≠vel em: $install_url" -ForegroundColor Cyan
        Write-Host ""
        
        if ($test) {
            Write-Host "üß™ Para testar a instala√ß√£o:" -ForegroundColor Yellow
            Write-Host "pip install --index-url https://test.pypi.org/simple/ netbox-maintenance-device" -ForegroundColor Gray
        } else {
            Write-Host "üì• Para instalar:" -ForegroundColor Yellow
            Write-Host "pip install netbox-maintenance-device" -ForegroundColor Gray
        }
        
        # Sugerir pr√≥ximos passos
        if (-not $test) {
            Write-Host ""
            Write-Host "üìã Pr√≥ximos passos recomendados:" -ForegroundColor Blue
            Write-Host "1. Criar release no GitHub com a tag v$((python -c 'import setup; print(setup.version)' 2>$null) -replace '[^\d\.]','')" -ForegroundColor Gray
            Write-Host "2. Atualizar documenta√ß√£o se necess√°rio" -ForegroundColor Gray
            Write-Host "3. Comunicar a nova vers√£o para a comunidade" -ForegroundColor Gray
        }
    } else {
        Write-Host "‚ùå Erro durante a publica√ß√£o" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚ùå Publica√ß√£o cancelada pelo usu√°rio" -ForegroundColor Red
}

Write-Host ""
Write-Host "‚ú® Script finalizado!" -ForegroundColor Green